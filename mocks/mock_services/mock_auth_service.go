// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/auth_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/auth_service.go -destination=internal/mocks/mock_services/mock_auth_service.go -package=mockservices
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	services "my-go-api/internal/services"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
	isgomock struct{}
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// CreateAuthTokens mocks base method.
func (m *MockIAuthService) CreateAuthTokens(params services.CreateAuthTokenParams) (services.CreateAuthTokensResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthTokens", params)
	ret0, _ := ret[0].(services.CreateAuthTokensResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthTokens indicates an expected call of CreateAuthTokens.
func (mr *MockIAuthServiceMockRecorder) CreateAuthTokens(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthTokens", reflect.TypeOf((*MockIAuthService)(nil).CreateAuthTokens), params)
}

// CreateVerificationToken mocks base method.
func (m *MockIAuthService) CreateVerificationToken(userId uuid.UUID) (services.VerificationTokenData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerificationToken", userId)
	ret0, _ := ret[0].(services.VerificationTokenData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerificationToken indicates an expected call of CreateVerificationToken.
func (mr *MockIAuthServiceMockRecorder) CreateVerificationToken(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerificationToken", reflect.TypeOf((*MockIAuthService)(nil).CreateVerificationToken), userId)
}

// VerifyVerificationToken mocks base method.
func (m *MockIAuthService) VerifyVerificationToken(params services.VerificationTokenData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyVerificationToken", params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyVerificationToken indicates an expected call of VerifyVerificationToken.
func (mr *MockIAuthServiceMockRecorder) VerifyVerificationToken(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyVerificationToken", reflect.TypeOf((*MockIAuthService)(nil).VerifyVerificationToken), params)
}

// generatePairToken mocks base method.
func (m *MockIAuthService) generatePairToken() (services.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "generatePairToken")
	ret0, _ := ret[0].(services.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// generatePairToken indicates an expected call of generatePairToken.
func (mr *MockIAuthServiceMockRecorder) generatePairToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "generatePairToken", reflect.TypeOf((*MockIAuthService)(nil).generatePairToken))
}
