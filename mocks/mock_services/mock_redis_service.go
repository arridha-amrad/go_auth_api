// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/redis_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/redis_service.go -destination=mocks/mock_services/mock_redis_service.go -package=mockservices
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	services "my-go-api/internal/services"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIRedisService is a mock of IRedisService interface.
type MockIRedisService struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisServiceMockRecorder
	isgomock struct{}
}

// MockIRedisServiceMockRecorder is the mock recorder for MockIRedisService.
type MockIRedisServiceMockRecorder struct {
	mock *MockIRedisService
}

// NewMockIRedisService creates a new mock instance.
func NewMockIRedisService(ctrl *gomock.Controller) *MockIRedisService {
	mock := &MockIRedisService{ctrl: ctrl}
	mock.recorder = &MockIRedisServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedisService) EXPECT() *MockIRedisServiceMockRecorder {
	return m.recorder
}

// DeleteAccessToken mocks base method.
func (m *MockIRedisService) DeleteAccessToken(jti string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessToken", jti)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessToken indicates an expected call of DeleteAccessToken.
func (mr *MockIRedisServiceMockRecorder) DeleteAccessToken(jti any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessToken", reflect.TypeOf((*MockIRedisService)(nil).DeleteAccessToken), jti)
}

// DeleteRefreshToken mocks base method.
func (m *MockIRedisService) DeleteRefreshToken(hashedToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", hashedToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockIRedisServiceMockRecorder) DeleteRefreshToken(hashedToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockIRedisService)(nil).DeleteRefreshToken), hashedToken)
}

// DeleteVerificationToken mocks base method.
func (m *MockIRedisService) DeleteVerificationToken(hashedToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVerificationToken", hashedToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVerificationToken indicates an expected call of DeleteVerificationToken.
func (mr *MockIRedisServiceMockRecorder) DeleteVerificationToken(hashedToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVerificationToken", reflect.TypeOf((*MockIRedisService)(nil).DeleteVerificationToken), hashedToken)
}

// GetAccessToken mocks base method.
func (m *MockIRedisService) GetAccessToken(jti string) (services.AccessTokenData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", jti)
	ret0, _ := ret[0].(services.AccessTokenData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockIRedisServiceMockRecorder) GetAccessToken(jti any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockIRedisService)(nil).GetAccessToken), jti)
}

// GetRefreshToken mocks base method.
func (m *MockIRedisService) GetRefreshToken(hashedToken string) (services.RefreshTokenData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", hashedToken)
	ret0, _ := ret[0].(services.RefreshTokenData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockIRedisServiceMockRecorder) GetRefreshToken(hashedToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockIRedisService)(nil).GetRefreshToken), hashedToken)
}

// GetVerificationToken mocks base method.
func (m *MockIRedisService) GetVerificationToken(hashedToken string) (services.VerificationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationToken", hashedToken)
	ret0, _ := ret[0].(services.VerificationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationToken indicates an expected call of GetVerificationToken.
func (mr *MockIRedisServiceMockRecorder) GetVerificationToken(hashedToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationToken", reflect.TypeOf((*MockIRedisService)(nil).GetVerificationToken), hashedToken)
}

// SaveAccessToken mocks base method.
func (m *MockIRedisService) SaveAccessToken(params services.AccessTokenData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccessToken", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccessToken indicates an expected call of SaveAccessToken.
func (mr *MockIRedisServiceMockRecorder) SaveAccessToken(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccessToken", reflect.TypeOf((*MockIRedisService)(nil).SaveAccessToken), params)
}

// SaveRefreshToken mocks base method.
func (m *MockIRedisService) SaveRefreshToken(params services.RefreshTokenData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshToken", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshToken indicates an expected call of SaveRefreshToken.
func (mr *MockIRedisServiceMockRecorder) SaveRefreshToken(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshToken", reflect.TypeOf((*MockIRedisService)(nil).SaveRefreshToken), params)
}

// SaveVerificationToken mocks base method.
func (m *MockIRedisService) SaveVerificationToken(params services.VerificationData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVerificationToken", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVerificationToken indicates an expected call of SaveVerificationToken.
func (mr *MockIRedisServiceMockRecorder) SaveVerificationToken(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVerificationToken", reflect.TypeOf((*MockIRedisService)(nil).SaveVerificationToken), params)
}
