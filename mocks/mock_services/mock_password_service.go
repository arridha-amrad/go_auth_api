// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/password_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/password_service.go -destination=internal/mocks/mock_services/mock_password_service.go -package=mocksservices
//

// Package mocksservices is a generated GoMock package.
package mockservices

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPasswordService is a mock of IPasswordService interface.
type MockIPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockIPasswordServiceMockRecorder
	isgomock struct{}
}

// MockIPasswordServiceMockRecorder is the mock recorder for MockIPasswordService.
type MockIPasswordServiceMockRecorder struct {
	mock *MockIPasswordService
}

// NewMockIPasswordService creates a new mock instance.
func NewMockIPasswordService(ctrl *gomock.Controller) *MockIPasswordService {
	mock := &MockIPasswordService{ctrl: ctrl}
	mock.recorder = &MockIPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPasswordService) EXPECT() *MockIPasswordServiceMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockIPasswordService) Hash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockIPasswordServiceMockRecorder) Hash(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockIPasswordService)(nil).Hash), password)
}

// Verify mocks base method.
func (m *MockIPasswordService) Verify(hashed, plain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", hashed, plain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockIPasswordServiceMockRecorder) Verify(hashed, plain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockIPasswordService)(nil).Verify), hashed, plain)
}
