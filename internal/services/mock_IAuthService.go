// Code generated by mockery. DO NOT EDIT.

package services

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockIAuthService is an autogenerated mock type for the IAuthService type
type MockIAuthService struct {
	mock.Mock
}

type MockIAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthService) EXPECT() *MockIAuthService_Expecter {
	return &MockIAuthService_Expecter{mock: &_m.Mock}
}

// CreateAuthTokens provides a mock function with given fields: params
func (_m *MockIAuthService) CreateAuthTokens(params CreateAuthTokenParams) (CreateAuthTokensResult, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthTokens")
	}

	var r0 CreateAuthTokensResult
	var r1 error
	if rf, ok := ret.Get(0).(func(CreateAuthTokenParams) (CreateAuthTokensResult, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(CreateAuthTokenParams) CreateAuthTokensResult); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(CreateAuthTokensResult)
	}

	if rf, ok := ret.Get(1).(func(CreateAuthTokenParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthService_CreateAuthTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthTokens'
type MockIAuthService_CreateAuthTokens_Call struct {
	*mock.Call
}

// CreateAuthTokens is a helper method to define mock.On call
//   - params CreateAuthTokenParams
func (_e *MockIAuthService_Expecter) CreateAuthTokens(params interface{}) *MockIAuthService_CreateAuthTokens_Call {
	return &MockIAuthService_CreateAuthTokens_Call{Call: _e.mock.On("CreateAuthTokens", params)}
}

func (_c *MockIAuthService_CreateAuthTokens_Call) Run(run func(params CreateAuthTokenParams)) *MockIAuthService_CreateAuthTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(CreateAuthTokenParams))
	})
	return _c
}

func (_c *MockIAuthService_CreateAuthTokens_Call) Return(_a0 CreateAuthTokensResult, _a1 error) *MockIAuthService_CreateAuthTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthService_CreateAuthTokens_Call) RunAndReturn(run func(CreateAuthTokenParams) (CreateAuthTokensResult, error)) *MockIAuthService_CreateAuthTokens_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVerificationToken provides a mock function with given fields: userId
func (_m *MockIAuthService) CreateVerificationToken(userId uuid.UUID) (VerificationTokenData, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for CreateVerificationToken")
	}

	var r0 VerificationTokenData
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (VerificationTokenData, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) VerificationTokenData); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(VerificationTokenData)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthService_CreateVerificationToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVerificationToken'
type MockIAuthService_CreateVerificationToken_Call struct {
	*mock.Call
}

// CreateVerificationToken is a helper method to define mock.On call
//   - userId uuid.UUID
func (_e *MockIAuthService_Expecter) CreateVerificationToken(userId interface{}) *MockIAuthService_CreateVerificationToken_Call {
	return &MockIAuthService_CreateVerificationToken_Call{Call: _e.mock.On("CreateVerificationToken", userId)}
}

func (_c *MockIAuthService_CreateVerificationToken_Call) Run(run func(userId uuid.UUID)) *MockIAuthService_CreateVerificationToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockIAuthService_CreateVerificationToken_Call) Return(_a0 VerificationTokenData, _a1 error) *MockIAuthService_CreateVerificationToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthService_CreateVerificationToken_Call) RunAndReturn(run func(uuid.UUID) (VerificationTokenData, error)) *MockIAuthService_CreateVerificationToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyVerificationToken provides a mock function with given fields: params
func (_m *MockIAuthService) VerifyVerificationToken(params VerificationTokenData) (string, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for VerifyVerificationToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(VerificationTokenData) (string, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(VerificationTokenData) string); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(VerificationTokenData) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthService_VerifyVerificationToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyVerificationToken'
type MockIAuthService_VerifyVerificationToken_Call struct {
	*mock.Call
}

// VerifyVerificationToken is a helper method to define mock.On call
//   - params VerificationTokenData
func (_e *MockIAuthService_Expecter) VerifyVerificationToken(params interface{}) *MockIAuthService_VerifyVerificationToken_Call {
	return &MockIAuthService_VerifyVerificationToken_Call{Call: _e.mock.On("VerifyVerificationToken", params)}
}

func (_c *MockIAuthService_VerifyVerificationToken_Call) Run(run func(params VerificationTokenData)) *MockIAuthService_VerifyVerificationToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(VerificationTokenData))
	})
	return _c
}

func (_c *MockIAuthService_VerifyVerificationToken_Call) Return(_a0 string, _a1 error) *MockIAuthService_VerifyVerificationToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthService_VerifyVerificationToken_Call) RunAndReturn(run func(VerificationTokenData) (string, error)) *MockIAuthService_VerifyVerificationToken_Call {
	_c.Call.Return(run)
	return _c
}

// generatePairToken provides a mock function with no fields
func (_m *MockIAuthService) generatePairToken() (TokenPair, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for generatePairToken")
	}

	var r0 TokenPair
	var r1 error
	if rf, ok := ret.Get(0).(func() (TokenPair, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() TokenPair); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(TokenPair)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAuthService_generatePairToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'generatePairToken'
type MockIAuthService_generatePairToken_Call struct {
	*mock.Call
}

// generatePairToken is a helper method to define mock.On call
func (_e *MockIAuthService_Expecter) generatePairToken() *MockIAuthService_generatePairToken_Call {
	return &MockIAuthService_generatePairToken_Call{Call: _e.mock.On("generatePairToken")}
}

func (_c *MockIAuthService_generatePairToken_Call) Run(run func()) *MockIAuthService_generatePairToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIAuthService_generatePairToken_Call) Return(_a0 TokenPair, _a1 error) *MockIAuthService_generatePairToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAuthService_generatePairToken_Call) RunAndReturn(run func() (TokenPair, error)) *MockIAuthService_generatePairToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAuthService creates a new instance of MockIAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthService {
	mock := &MockIAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
