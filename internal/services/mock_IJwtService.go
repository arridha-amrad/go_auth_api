// Code generated by mockery. DO NOT EDIT.

package services

import mock "github.com/stretchr/testify/mock"

// MockIJwtService is an autogenerated mock type for the IJwtService type
type MockIJwtService struct {
	mock.Mock
}

type MockIJwtService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIJwtService) EXPECT() *MockIJwtService_Expecter {
	return &MockIJwtService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *MockIJwtService) Create(_a0 JWTPayload) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(JWTPayload) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(JWTPayload) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(JWTPayload) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJwtService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIJwtService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 JWTPayload
func (_e *MockIJwtService_Expecter) Create(_a0 interface{}) *MockIJwtService_Create_Call {
	return &MockIJwtService_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *MockIJwtService_Create_Call) Run(run func(_a0 JWTPayload)) *MockIJwtService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(JWTPayload))
	})
	return _c
}

func (_c *MockIJwtService_Create_Call) Return(_a0 string, _a1 error) *MockIJwtService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJwtService_Create_Call) RunAndReturn(run func(JWTPayload) (string, error)) *MockIJwtService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: tokenString
func (_m *MockIJwtService) Verify(tokenString string) (JWTPayload, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 JWTPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (JWTPayload, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) JWTPayload); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Get(0).(JWTPayload)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIJwtService_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type MockIJwtService_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - tokenString string
func (_e *MockIJwtService_Expecter) Verify(tokenString interface{}) *MockIJwtService_Verify_Call {
	return &MockIJwtService_Verify_Call{Call: _e.mock.On("Verify", tokenString)}
}

func (_c *MockIJwtService_Verify_Call) Run(run func(tokenString string)) *MockIJwtService_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIJwtService_Verify_Call) Return(_a0 JWTPayload, _a1 error) *MockIJwtService_Verify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIJwtService_Verify_Call) RunAndReturn(run func(string) (JWTPayload, error)) *MockIJwtService_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIJwtService creates a new instance of MockIJwtService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIJwtService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIJwtService {
	mock := &MockIJwtService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
