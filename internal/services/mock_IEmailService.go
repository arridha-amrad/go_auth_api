// Code generated by mockery. DO NOT EDIT.

package services

import mock "github.com/stretchr/testify/mock"

// MockIEmailService is an autogenerated mock type for the IEmailService type
type MockIEmailService struct {
	mock.Mock
}

type MockIEmailService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIEmailService) EXPECT() *MockIEmailService_Expecter {
	return &MockIEmailService_Expecter{mock: &_m.Mock}
}

// SendVerificationEmail provides a mock function with given fields: params
func (_m *MockIEmailService) SendVerificationEmail(params SendEmailVerificationParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for SendVerificationEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(SendEmailVerificationParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIEmailService_SendVerificationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerificationEmail'
type MockIEmailService_SendVerificationEmail_Call struct {
	*mock.Call
}

// SendVerificationEmail is a helper method to define mock.On call
//   - params SendEmailVerificationParams
func (_e *MockIEmailService_Expecter) SendVerificationEmail(params interface{}) *MockIEmailService_SendVerificationEmail_Call {
	return &MockIEmailService_SendVerificationEmail_Call{Call: _e.mock.On("SendVerificationEmail", params)}
}

func (_c *MockIEmailService_SendVerificationEmail_Call) Run(run func(params SendEmailVerificationParams)) *MockIEmailService_SendVerificationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(SendEmailVerificationParams))
	})
	return _c
}

func (_c *MockIEmailService_SendVerificationEmail_Call) Return(_a0 error) *MockIEmailService_SendVerificationEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIEmailService_SendVerificationEmail_Call) RunAndReturn(run func(SendEmailVerificationParams) error) *MockIEmailService_SendVerificationEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIEmailService creates a new instance of MockIEmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIEmailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIEmailService {
	mock := &MockIEmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
