// Code generated by mockery. DO NOT EDIT.

package services

import (
	context "context"
	models "my-go-api/internal/models"

	mock "github.com/stretchr/testify/mock"

	repositories "my-go-api/internal/repositories"

	uuid "github.com/google/uuid"
)

// MockIUserService is an autogenerated mock type for the IUserService type
type MockIUserService struct {
	mock.Mock
}

type MockIUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUserService) EXPECT() *MockIUserService_Expecter {
	return &MockIUserService_Expecter{mock: &_m.Mock}
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *MockIUserService) GetAllUsers(ctx context.Context) ([]models.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockIUserService_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIUserService_Expecter) GetAllUsers(ctx interface{}) *MockIUserService_GetAllUsers_Call {
	return &MockIUserService_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", ctx)}
}

func (_c *MockIUserService_GetAllUsers_Call) Run(run func(ctx context.Context)) *MockIUserService_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIUserService_GetAllUsers_Call) Return(_a0 []models.User, _a1 error) *MockIUserService_GetAllUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_GetAllUsers_Call) RunAndReturn(run func(context.Context) ([]models.User, error)) *MockIUserService_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockIUserService) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockIUserService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockIUserService_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockIUserService_GetUserByEmail_Call {
	return &MockIUserService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockIUserService_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockIUserService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserService_GetUserByEmail_Call) Return(_a0 *models.User, _a1 error) *MockIUserService_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockIUserService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: ctx, userId
func (_m *MockIUserService) GetUserById(ctx context.Context, userId uuid.UUID) (*models.User, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockIUserService_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockIUserService_Expecter) GetUserById(ctx interface{}, userId interface{}) *MockIUserService_GetUserById_Call {
	return &MockIUserService_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, userId)}
}

func (_c *MockIUserService_GetUserById_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockIUserService_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIUserService_GetUserById_Call) Return(_a0 *models.User, _a1 error) *MockIUserService_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_GetUserById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.User, error)) *MockIUserService_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByIdentity provides a mock function with given fields: ctx, identity
func (_m *MockIUserService) GetUserByIdentity(ctx context.Context, identity string) (*models.User, error) {
	ret := _m.Called(ctx, identity)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByIdentity")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, identity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, identity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, identity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_GetUserByIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByIdentity'
type MockIUserService_GetUserByIdentity_Call struct {
	*mock.Call
}

// GetUserByIdentity is a helper method to define mock.On call
//   - ctx context.Context
//   - identity string
func (_e *MockIUserService_Expecter) GetUserByIdentity(ctx interface{}, identity interface{}) *MockIUserService_GetUserByIdentity_Call {
	return &MockIUserService_GetUserByIdentity_Call{Call: _e.mock.On("GetUserByIdentity", ctx, identity)}
}

func (_c *MockIUserService_GetUserByIdentity_Call) Run(run func(ctx context.Context, identity string)) *MockIUserService_GetUserByIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserService_GetUserByIdentity_Call) Return(_a0 *models.User, _a1 error) *MockIUserService_GetUserByIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_GetUserByIdentity_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockIUserService_GetUserByIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockIUserService) GetUserByUsername(ctx context.Context, username string) (*models.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockIUserService_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockIUserService_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockIUserService_GetUserByUsername_Call {
	return &MockIUserService_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockIUserService_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockIUserService_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIUserService_GetUserByUsername_Call) Return(_a0 *models.User, _a1 error) *MockIUserService_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockIUserService_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: ctx, params
func (_m *MockIUserService) Store(ctx context.Context, params repositories.CreateOneParams) (*models.User, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateOneParams) (*models.User, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreateOneParams) *models.User); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.CreateOneParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MockIUserService_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - params repositories.CreateOneParams
func (_e *MockIUserService_Expecter) Store(ctx interface{}, params interface{}) *MockIUserService_Store_Call {
	return &MockIUserService_Store_Call{Call: _e.mock.On("Store", ctx, params)}
}

func (_c *MockIUserService_Store_Call) Run(run func(ctx context.Context, params repositories.CreateOneParams)) *MockIUserService_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repositories.CreateOneParams))
	})
	return _c
}

func (_c *MockIUserService_Store_Call) Return(_a0 *models.User, _a1 error) *MockIUserService_Store_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_Store_Call) RunAndReturn(run func(context.Context, repositories.CreateOneParams) (*models.User, error)) *MockIUserService_Store_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *MockIUserService) UpdateUser(ctx context.Context, user *models.User) (*models.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) (*models.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockIUserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
func (_e *MockIUserService_Expecter) UpdateUser(ctx interface{}, user interface{}) *MockIUserService_UpdateUser_Call {
	return &MockIUserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, user)}
}

func (_c *MockIUserService_UpdateUser_Call) Run(run func(ctx context.Context, user *models.User)) *MockIUserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *MockIUserService_UpdateUser_Call) Return(_a0 *models.User, _a1 error) *MockIUserService_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUserService_UpdateUser_Call) RunAndReturn(run func(context.Context, *models.User) (*models.User, error)) *MockIUserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUserService creates a new instance of MockIUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserService {
	mock := &MockIUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
