// Code generated by mockery. DO NOT EDIT.

package utils

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"

	uuid "github.com/google/uuid"
)

// MockIUtils is an autogenerated mock type for the IUtils type
type MockIUtils struct {
	mock.Mock
}

type MockIUtils_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIUtils) EXPECT() *MockIUtils_Expecter {
	return &MockIUtils_Expecter{mock: &_m.Mock}
}

// CreateGoogleOauth2Config provides a mock function with no fields
func (_m *MockIUtils) CreateGoogleOauth2Config() *oauth2.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateGoogleOauth2Config")
	}

	var r0 *oauth2.Config
	if rf, ok := ret.Get(0).(func() *oauth2.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Config)
		}
	}

	return r0
}

// MockIUtils_CreateGoogleOauth2Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGoogleOauth2Config'
type MockIUtils_CreateGoogleOauth2Config_Call struct {
	*mock.Call
}

// CreateGoogleOauth2Config is a helper method to define mock.On call
func (_e *MockIUtils_Expecter) CreateGoogleOauth2Config() *MockIUtils_CreateGoogleOauth2Config_Call {
	return &MockIUtils_CreateGoogleOauth2Config_Call{Call: _e.mock.On("CreateGoogleOauth2Config")}
}

func (_c *MockIUtils_CreateGoogleOauth2Config_Call) Run(run func()) *MockIUtils_CreateGoogleOauth2Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIUtils_CreateGoogleOauth2Config_Call) Return(_a0 *oauth2.Config) *MockIUtils_CreateGoogleOauth2Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUtils_CreateGoogleOauth2Config_Call) RunAndReturn(run func() *oauth2.Config) *MockIUtils_CreateGoogleOauth2Config_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRandomBytes provides a mock function with given fields: size
func (_m *MockIUtils) GenerateRandomBytes(size int) (string, error) {
	ret := _m.Called(size)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRandomBytes")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(size)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(size)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUtils_GenerateRandomBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRandomBytes'
type MockIUtils_GenerateRandomBytes_Call struct {
	*mock.Call
}

// GenerateRandomBytes is a helper method to define mock.On call
//   - size int
func (_e *MockIUtils_Expecter) GenerateRandomBytes(size interface{}) *MockIUtils_GenerateRandomBytes_Call {
	return &MockIUtils_GenerateRandomBytes_Call{Call: _e.mock.On("GenerateRandomBytes", size)}
}

func (_c *MockIUtils_GenerateRandomBytes_Call) Run(run func(size int)) *MockIUtils_GenerateRandomBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockIUtils_GenerateRandomBytes_Call) Return(_a0 string, _a1 error) *MockIUtils_GenerateRandomBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUtils_GenerateRandomBytes_Call) RunAndReturn(run func(int) (string, error)) *MockIUtils_GenerateRandomBytes_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateToken provides a mock function with given fields: userId, jti
func (_m *MockIUtils) GenerateToken(userId uuid.UUID, jti uuid.UUID) (string, error) {
	ret := _m.Called(userId, jti)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (string, error)); ok {
		return rf(userId, jti)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) string); ok {
		r0 = rf(userId, jti)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(userId, jti)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUtils_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockIUtils_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - userId uuid.UUID
//   - jti uuid.UUID
func (_e *MockIUtils_Expecter) GenerateToken(userId interface{}, jti interface{}) *MockIUtils_GenerateToken_Call {
	return &MockIUtils_GenerateToken_Call{Call: _e.mock.On("GenerateToken", userId, jti)}
}

func (_c *MockIUtils_GenerateToken_Call) Run(run func(userId uuid.UUID, jti uuid.UUID)) *MockIUtils_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockIUtils_GenerateToken_Call) Return(_a0 string, _a1 error) *MockIUtils_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUtils_GenerateToken_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (string, error)) *MockIUtils_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenFromRefreshToken provides a mock function with given fields: config
func (_m *MockIUtils) GetTokenFromRefreshToken(config *oauth2.Config) *oauth2.Token {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenFromRefreshToken")
	}

	var r0 *oauth2.Token
	if rf, ok := ret.Get(0).(func(*oauth2.Config) *oauth2.Token); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	return r0
}

// MockIUtils_GetTokenFromRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenFromRefreshToken'
type MockIUtils_GetTokenFromRefreshToken_Call struct {
	*mock.Call
}

// GetTokenFromRefreshToken is a helper method to define mock.On call
//   - config *oauth2.Config
func (_e *MockIUtils_Expecter) GetTokenFromRefreshToken(config interface{}) *MockIUtils_GetTokenFromRefreshToken_Call {
	return &MockIUtils_GetTokenFromRefreshToken_Call{Call: _e.mock.On("GetTokenFromRefreshToken", config)}
}

func (_c *MockIUtils_GetTokenFromRefreshToken_Call) Run(run func(config *oauth2.Config)) *MockIUtils_GetTokenFromRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*oauth2.Config))
	})
	return _c
}

func (_c *MockIUtils_GetTokenFromRefreshToken_Call) Return(_a0 *oauth2.Token) *MockIUtils_GetTokenFromRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUtils_GetTokenFromRefreshToken_Call) RunAndReturn(run func(*oauth2.Config) *oauth2.Token) *MockIUtils_GetTokenFromRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// HashPassword provides a mock function with given fields: password
func (_m *MockIUtils) HashPassword(password string) (string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUtils_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type MockIUtils_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//   - password string
func (_e *MockIUtils_Expecter) HashPassword(password interface{}) *MockIUtils_HashPassword_Call {
	return &MockIUtils_HashPassword_Call{Call: _e.mock.On("HashPassword", password)}
}

func (_c *MockIUtils_HashPassword_Call) Run(run func(password string)) *MockIUtils_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIUtils_HashPassword_Call) Return(_a0 string, _a1 error) *MockIUtils_HashPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUtils_HashPassword_Call) RunAndReturn(run func(string) (string, error)) *MockIUtils_HashPassword_Call {
	_c.Call.Return(run)
	return _c
}

// HashWithSHA256 provides a mock function with given fields: randomStr
func (_m *MockIUtils) HashWithSHA256(randomStr string) string {
	ret := _m.Called(randomStr)

	if len(ret) == 0 {
		panic("no return value specified for HashWithSHA256")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(randomStr)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIUtils_HashWithSHA256_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashWithSHA256'
type MockIUtils_HashWithSHA256_Call struct {
	*mock.Call
}

// HashWithSHA256 is a helper method to define mock.On call
//   - randomStr string
func (_e *MockIUtils_Expecter) HashWithSHA256(randomStr interface{}) *MockIUtils_HashWithSHA256_Call {
	return &MockIUtils_HashWithSHA256_Call{Call: _e.mock.On("HashWithSHA256", randomStr)}
}

func (_c *MockIUtils_HashWithSHA256_Call) Run(run func(randomStr string)) *MockIUtils_HashWithSHA256_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIUtils_HashWithSHA256_Call) Return(_a0 string) *MockIUtils_HashWithSHA256_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUtils_HashWithSHA256_Call) RunAndReturn(run func(string) string) *MockIUtils_HashWithSHA256_Call {
	_c.Call.Return(run)
	return _c
}

// SendEmailWithGmail provides a mock function with given fields: subject, body, address
func (_m *MockIUtils) SendEmailWithGmail(subject string, body string, address string) error {
	ret := _m.Called(subject, body, address)

	if len(ret) == 0 {
		panic("no return value specified for SendEmailWithGmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(subject, body, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUtils_SendEmailWithGmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmailWithGmail'
type MockIUtils_SendEmailWithGmail_Call struct {
	*mock.Call
}

// SendEmailWithGmail is a helper method to define mock.On call
//   - subject string
//   - body string
//   - address string
func (_e *MockIUtils_Expecter) SendEmailWithGmail(subject interface{}, body interface{}, address interface{}) *MockIUtils_SendEmailWithGmail_Call {
	return &MockIUtils_SendEmailWithGmail_Call{Call: _e.mock.On("SendEmailWithGmail", subject, body, address)}
}

func (_c *MockIUtils_SendEmailWithGmail_Call) Run(run func(subject string, body string, address string)) *MockIUtils_SendEmailWithGmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIUtils_SendEmailWithGmail_Call) Return(_a0 error) *MockIUtils_SendEmailWithGmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUtils_SendEmailWithGmail_Call) RunAndReturn(run func(string, string, string) error) *MockIUtils_SendEmailWithGmail_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *MockIUtils) ValidateToken(tokenString string) (*jwt.MapClaims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *jwt.MapClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.MapClaims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.MapClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.MapClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIUtils_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockIUtils_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - tokenString string
func (_e *MockIUtils_Expecter) ValidateToken(tokenString interface{}) *MockIUtils_ValidateToken_Call {
	return &MockIUtils_ValidateToken_Call{Call: _e.mock.On("ValidateToken", tokenString)}
}

func (_c *MockIUtils_ValidateToken_Call) Run(run func(tokenString string)) *MockIUtils_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIUtils_ValidateToken_Call) Return(_a0 *jwt.MapClaims, _a1 error) *MockIUtils_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIUtils_ValidateToken_Call) RunAndReturn(run func(string) (*jwt.MapClaims, error)) *MockIUtils_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPassword provides a mock function with given fields: hashedPassword, password
func (_m *MockIUtils) VerifyPassword(hashedPassword string, password string) error {
	ret := _m.Called(hashedPassword, password)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(hashedPassword, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIUtils_VerifyPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPassword'
type MockIUtils_VerifyPassword_Call struct {
	*mock.Call
}

// VerifyPassword is a helper method to define mock.On call
//   - hashedPassword string
//   - password string
func (_e *MockIUtils_Expecter) VerifyPassword(hashedPassword interface{}, password interface{}) *MockIUtils_VerifyPassword_Call {
	return &MockIUtils_VerifyPassword_Call{Call: _e.mock.On("VerifyPassword", hashedPassword, password)}
}

func (_c *MockIUtils_VerifyPassword_Call) Run(run func(hashedPassword string, password string)) *MockIUtils_VerifyPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockIUtils_VerifyPassword_Call) Return(_a0 error) *MockIUtils_VerifyPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIUtils_VerifyPassword_Call) RunAndReturn(run func(string, string) error) *MockIUtils_VerifyPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIUtils creates a new instance of MockIUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUtils {
	mock := &MockIUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
