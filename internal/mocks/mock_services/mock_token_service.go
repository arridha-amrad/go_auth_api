// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/token_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/token_service.go -destination=internal/mocks/mock_services/mock_token_service.go -package=mockservices
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	services "my-go-api/internal/services"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockITokenService is a mock of ITokenService interface.
type MockITokenService struct {
	ctrl     *gomock.Controller
	recorder *MockITokenServiceMockRecorder
	isgomock struct{}
}

// MockITokenServiceMockRecorder is the mock recorder for MockITokenService.
type MockITokenServiceMockRecorder struct {
	mock *MockITokenService
}

// NewMockITokenService creates a new mock instance.
func NewMockITokenService(ctrl *gomock.Controller) *MockITokenService {
	mock := &MockITokenService{ctrl: ctrl}
	mock.recorder = &MockITokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenService) EXPECT() *MockITokenServiceMockRecorder {
	return m.recorder
}

// CreateAccessToken mocks base method.
func (m *MockITokenService) CreateAccessToken(userId, jti uuid.UUID, jwtVersion string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessToken", userId, jti, jwtVersion)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessToken indicates an expected call of CreateAccessToken.
func (mr *MockITokenServiceMockRecorder) CreateAccessToken(userId, jti, jwtVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessToken", reflect.TypeOf((*MockITokenService)(nil).CreateAccessToken), userId, jti, jwtVersion)
}

// CreateAuthToken mocks base method.
func (m *MockITokenService) CreateAuthToken(params services.CreateAuthTokenParams) (services.AuthTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthToken", params)
	ret0, _ := ret[0].(services.AuthTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthToken indicates an expected call of CreateAuthToken.
func (mr *MockITokenServiceMockRecorder) CreateAuthToken(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthToken", reflect.TypeOf((*MockITokenService)(nil).CreateAuthToken), params)
}

// CreatePairToken mocks base method.
func (m *MockITokenService) CreatePairToken() (services.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePairToken")
	ret0, _ := ret[0].(services.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePairToken indicates an expected call of CreatePairToken.
func (mr *MockITokenServiceMockRecorder) CreatePairToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePairToken", reflect.TypeOf((*MockITokenService)(nil).CreatePairToken))
}

// DeleteAccessToken mocks base method.
func (m *MockITokenService) DeleteAccessToken(jti uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessToken", jti)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessToken indicates an expected call of DeleteAccessToken.
func (mr *MockITokenServiceMockRecorder) DeleteAccessToken(jti any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessToken", reflect.TypeOf((*MockITokenService)(nil).DeleteAccessToken), jti)
}

// DeleteRefreshToken mocks base method.
func (m *MockITokenService) DeleteRefreshToken(hashedToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", hashedToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockITokenServiceMockRecorder) DeleteRefreshToken(hashedToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockITokenService)(nil).DeleteRefreshToken), hashedToken)
}

// DeleteVerificationToken mocks base method.
func (m *MockITokenService) DeleteVerificationToken(hashedToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVerificationToken", hashedToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVerificationToken indicates an expected call of DeleteVerificationToken.
func (mr *MockITokenServiceMockRecorder) DeleteVerificationToken(hashedToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVerificationToken", reflect.TypeOf((*MockITokenService)(nil).DeleteVerificationToken), hashedToken)
}

// GenerateRandomBytes mocks base method.
func (m *MockITokenService) GenerateRandomBytes(size int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomBytes", size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRandomBytes indicates an expected call of GenerateRandomBytes.
func (mr *MockITokenServiceMockRecorder) GenerateRandomBytes(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomBytes", reflect.TypeOf((*MockITokenService)(nil).GenerateRandomBytes), size)
}

// GetRefreshToken mocks base method.
func (m *MockITokenService) GetRefreshToken(hashedToken string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", hashedToken)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockITokenServiceMockRecorder) GetRefreshToken(hashedToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockITokenService)(nil).GetRefreshToken), hashedToken)
}

// GetVerificationToken mocks base method.
func (m *MockITokenService) GetVerificationToken(hashedToken string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerificationToken", hashedToken)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVerificationToken indicates an expected call of GetVerificationToken.
func (mr *MockITokenServiceMockRecorder) GetVerificationToken(hashedToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerificationToken", reflect.TypeOf((*MockITokenService)(nil).GetVerificationToken), hashedToken)
}

// HashWithSHA256 mocks base method.
func (m *MockITokenService) HashWithSHA256(randomStr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashWithSHA256", randomStr)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashWithSHA256 indicates an expected call of HashWithSHA256.
func (mr *MockITokenServiceMockRecorder) HashWithSHA256(randomStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashWithSHA256", reflect.TypeOf((*MockITokenService)(nil).HashWithSHA256), randomStr)
}

// SaveAccessToken mocks base method.
func (m *MockITokenService) SaveAccessToken(userId, jti uuid.UUID, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccessToken", userId, jti, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccessToken indicates an expected call of SaveAccessToken.
func (mr *MockITokenServiceMockRecorder) SaveAccessToken(userId, jti, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccessToken", reflect.TypeOf((*MockITokenService)(nil).SaveAccessToken), userId, jti, token)
}

// SaveRefreshToken mocks base method.
func (m *MockITokenService) SaveRefreshToken(params services.RefreshTokenPayload, hashedToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshToken", params, hashedToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshToken indicates an expected call of SaveRefreshToken.
func (mr *MockITokenServiceMockRecorder) SaveRefreshToken(params, hashedToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshToken", reflect.TypeOf((*MockITokenService)(nil).SaveRefreshToken), params, hashedToken)
}

// SaveVerificationToken mocks base method.
func (m *MockITokenService) SaveVerificationToken(hashedToken string, userId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveVerificationToken", hashedToken, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveVerificationToken indicates an expected call of SaveVerificationToken.
func (mr *MockITokenServiceMockRecorder) SaveVerificationToken(hashedToken, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveVerificationToken", reflect.TypeOf((*MockITokenService)(nil).SaveVerificationToken), hashedToken, userId)
}

// VerifyAccessToken mocks base method.
func (m *MockITokenService) VerifyAccessToken(tokenString string) (*services.TokenPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccessToken", tokenString)
	ret0, _ := ret[0].(*services.TokenPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAccessToken indicates an expected call of VerifyAccessToken.
func (mr *MockITokenServiceMockRecorder) VerifyAccessToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccessToken", reflect.TypeOf((*MockITokenService)(nil).VerifyAccessToken), tokenString)
}
