// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/email_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/services/email_service.go -destination=internal/mocks/mock_services/mock_email_service.go -package=mockservices
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIEmailService is a mock of IEmailService interface.
type MockIEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockIEmailServiceMockRecorder
	isgomock struct{}
}

// MockIEmailServiceMockRecorder is the mock recorder for MockIEmailService.
type MockIEmailServiceMockRecorder struct {
	mock *MockIEmailService
}

// NewMockIEmailService creates a new mock instance.
func NewMockIEmailService(ctrl *gomock.Controller) *MockIEmailService {
	mock := &MockIEmailService{ctrl: ctrl}
	mock.recorder = &MockIEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEmailService) EXPECT() *MockIEmailServiceMockRecorder {
	return m.recorder
}

// SendVerificationEmail mocks base method.
func (m *MockIEmailService) SendVerificationEmail(name, email, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationEmail", name, email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationEmail indicates an expected call of SendVerificationEmail.
func (mr *MockIEmailServiceMockRecorder) SendVerificationEmail(name, email, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationEmail", reflect.TypeOf((*MockIEmailService)(nil).SendVerificationEmail), name, email, token)
}
