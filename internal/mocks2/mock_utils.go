// Code generated by MockGen. DO NOT EDIT.
// Source: internal/utils/utils.go
//
// Generated by this command:
//
//	mockgen -source=internal/utils/utils.go -destination=internal/mocks/mock_utils.go -package=mockutils
//

// Package mockutils is a generated GoMock package.
package mockutils

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockIUtils is a mock of IUtils interface.
type MockIUtils struct {
	ctrl     *gomock.Controller
	recorder *MockIUtilsMockRecorder
	isgomock struct{}
}

// MockIUtilsMockRecorder is the mock recorder for MockIUtils.
type MockIUtilsMockRecorder struct {
	mock *MockIUtils
}

// NewMockIUtils creates a new mock instance.
func NewMockIUtils(ctrl *gomock.Controller) *MockIUtils {
	mock := &MockIUtils{ctrl: ctrl}
	mock.recorder = &MockIUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUtils) EXPECT() *MockIUtilsMockRecorder {
	return m.recorder
}

// CreateGoogleOauth2Config mocks base method.
func (m *MockIUtils) CreateGoogleOauth2Config() *oauth2.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGoogleOauth2Config")
	ret0, _ := ret[0].(*oauth2.Config)
	return ret0
}

// CreateGoogleOauth2Config indicates an expected call of CreateGoogleOauth2Config.
func (mr *MockIUtilsMockRecorder) CreateGoogleOauth2Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGoogleOauth2Config", reflect.TypeOf((*MockIUtils)(nil).CreateGoogleOauth2Config))
}

// GenerateRandomBytes mocks base method.
func (m *MockIUtils) GenerateRandomBytes(size int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomBytes", size)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRandomBytes indicates an expected call of GenerateRandomBytes.
func (mr *MockIUtilsMockRecorder) GenerateRandomBytes(size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomBytes", reflect.TypeOf((*MockIUtils)(nil).GenerateRandomBytes), size)
}

// GenerateToken mocks base method.
func (m *MockIUtils) GenerateToken(userId, jti uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userId, jti)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockIUtilsMockRecorder) GenerateToken(userId, jti any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockIUtils)(nil).GenerateToken), userId, jti)
}

// GetTokenFromRefreshToken mocks base method.
func (m *MockIUtils) GetTokenFromRefreshToken(config *oauth2.Config) *oauth2.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenFromRefreshToken", config)
	ret0, _ := ret[0].(*oauth2.Token)
	return ret0
}

// GetTokenFromRefreshToken indicates an expected call of GetTokenFromRefreshToken.
func (mr *MockIUtilsMockRecorder) GetTokenFromRefreshToken(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenFromRefreshToken", reflect.TypeOf((*MockIUtils)(nil).GetTokenFromRefreshToken), config)
}

// HashPassword mocks base method.
func (m *MockIUtils) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockIUtilsMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockIUtils)(nil).HashPassword), password)
}

// HashWithSHA256 mocks base method.
func (m *MockIUtils) HashWithSHA256(randomStr string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashWithSHA256", randomStr)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashWithSHA256 indicates an expected call of HashWithSHA256.
func (mr *MockIUtilsMockRecorder) HashWithSHA256(randomStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashWithSHA256", reflect.TypeOf((*MockIUtils)(nil).HashWithSHA256), randomStr)
}

// SendEmailWithGmail mocks base method.
func (m *MockIUtils) SendEmailWithGmail(subject, body, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailWithGmail", subject, body, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailWithGmail indicates an expected call of SendEmailWithGmail.
func (mr *MockIUtilsMockRecorder) SendEmailWithGmail(subject, body, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailWithGmail", reflect.TypeOf((*MockIUtils)(nil).SendEmailWithGmail), subject, body, address)
}

// ValidateToken mocks base method.
func (m *MockIUtils) ValidateToken(tokenString string) (*jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(*jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockIUtilsMockRecorder) ValidateToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockIUtils)(nil).ValidateToken), tokenString)
}

// VerifyPassword mocks base method.
func (m *MockIUtils) VerifyPassword(hashedPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockIUtilsMockRecorder) VerifyPassword(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockIUtils)(nil).VerifyPassword), hashedPassword, password)
}
